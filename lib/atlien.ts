import {createHash} from 'crypto';

const atlienAdjectiveList = [
    "adorable",
    "adventurous",
    "aggressive",
    "alert",
    "attractive",
    "average",
    "beautiful",
    "blue-eyed",
    "bloody",
    "blushing",
    "bright",
    "clean",
    "clear",
    "cloudy",
    "colorful",
    "crowded",
    "cute",
    "dark",
    "drab",
    "distinct",
    "dull",
    "elegant",
    "excited",
    "fancy",
    "filthy",
    "glamorous",
    "gleaming",
    "graceful",
    "grotesque",
    "handsome",
    "light",
    "long",
    "magnificent",
    "misty",
    "motionless",
    "muddy",
    "old-fashioned",
    "plain",
    "poised",
    "precious",
    "quaint",
    "shiny",
    "smoggy",
    "sparkling",
    "spotless",
    "stormy",
    "strange",
    "ugly",
    "unusual",
    "wide-eyed",
    "alive",
    "better",
    "careful",
    "clever",
    "dead",
    "easy",
    "famous",
    "gifted",
    "helpful",
    "important",
    "inexpensive",
    "mushy",
    "odd",
    "powerful",
    "rich",
    "shy",
    "tender",
    "uninterested",
    "vast",
    "wandering",
    "wild",
    "angry",
    "bewildered",
    "clumsy",
    "defeated",
    "embarrassed",
    "fierce",
    "grumpy",
    "helpless",
    "itchy",
    "jealous",
    "lazy",
    "mysterious",
    "nervous",
    "obnoxious",
    "panicky",
    "pitiful",
    "repulsive",
    "scary",
    "thoughtless",
    "uptight",
    "worried",
    "agreeable",
    "brave",
    "calm",
    "delightful",
    "eager",
    "faithful",
    "gentle",
    "happy",
    "jolly",
    "kind",
    "lively",
    "nice",
    "obedient",
    "polite",
    "proud",
    "silly",
    "thankful",
    "victorious",
    "witty",
    "wonderful",
    "zealous",
    "broad",
    "chubby",
    "crooked",
    "curved",
    "deep",
    "flat",
    "high",
    "hollow",
    "low",
    "narrow",
    "round",
    "shallow",
    "skinny",
    "square",
    "steep",
    "straight",
    "wide",
    "big",
    "colossal",
    "fat",
    "gigantic",
    "great",
    "huge",
    "immense",
    "large",
    "little",
    "mammoth",
    "massive",
    "miniature",
    "petite",
    "puny",
    "scrawny",
    "short",
    "small",
    "tall",
    "teeny",
    "tiny",
    "ancient",
    "brief",
    "early",
    "fast",
    "late",
    "long",
    "modern",
    "old",
    "old-fashioned",
    "quick",
    "rapid",
    "short",
    "slow",
    "swift",
    "young",
    "bitter",
    "delicious",
    "fresh",
    "greasy",
    "juicy",
    "hot",
    "icy",
    "loose",
    "melted",
    "nutritious",
    "prickly",
    "rainy",
    "rotten",
    "salty",
    "sticky",
    "strong",
    "sweet",
    "tart",
    "tasteless",
    "tasty",
    "thirsty",
    "fluttering",
    "fuzzy",
    "grubby",
    "homeless",
    "muddy",
    "nervous",
    "perfect",
    "quaint",
    "shiny",
    "spotless",
    "stormy",
    "strange",
    "ugly",
    "unusual",
    "wandering",
    "wild",
    "zany",
    "caring",
    "charming",
    "cheerful",
    "confident",
    "considerate",
    "enthusiastic",
    "funny",
    "generous",
    "honest",
    "loyal",
    "optimistic",
    "patient",
    "positive",
    "respectful",
    "supportive",
    "warm",
    "adventurous",
    "affectionate",
    "agreeable",
    "ambitious",
    "courageous",
    "daring",
    "decisive",
    "diligent",
    "easygoing",
    "encouraging",
    "forgiving",
    "helpful",
    "imaginative",
    "independent",
    "inventive",
    "loving",
    "modest",
    "playful",
    "practical",
    "reliable",
    "resourceful",
    "romantic",
    "sincere",
    "trustworthy",
    "understanding",
    "attentive",
    "aware",
    "balanced",
    "brilliant",
    "calm",
    "capable",
    "chill",
    "confident",
    "considerate",
    "consistent",
    "creative",
    "dedicated",
    "disciplined",
    "efficient",
    "flexible",
    "focused",
    "friendly",
    "generous",
    "graceful",
    "hardworking",
    "helpful",
    "honest",
    "humble",
    "inquisitive",
    "intelligent",
    "kind",
    "logical",
    "mindful",
    "motivated",
    "open-minded",
    "organized",
    "patient",
    "persistent",
    "pragmatic",
    "reflective",
    "resilient",
    "self-aware",
    "selfless",
    "strategic",
    "thoughtful",
    "versatile",
    "wise",
    "youthful",
    "zestful",
    "agile",
    "alluring",
    "artistic",
    "astonishing",
    "attentive",
    "audacious",
    "authentic",
    "aware",
    "bold",
    "brilliant",
    "capable",
    "chill",
    "clever",
    "courageous",
    "creative",
    "cultured",
    "curious",
    "daring",
    "dedicated",
    "delightful",
    "determined",
    "disciplined",
    "dynamic",
    "eager",
    "elegant",
    "eloquent",
    "empathetic",
    "energetic",
    "engaging",
    "enthusiastic",
    "expressive",
    "fascinating",
    "fearless",
    "focused",
    "forgiving",
    "friendly",
    "fun",
    "funny",
    "generous",
    "gentle",
    "genuine",
    "gracious",
    "gritty",
    "happy",
    "hardworking",
    "hilarious",
    "honest",
    "hopeful",
    "imaginative",
    "independent",
    "influential",
    "innovative",
    "inspired",
    "intelligent",
    "intentional",
    "intuitive",
    "inventive",
    "joyful",
    "kind",
    "knowledgeable",
    "lively",
    "loving",
    "loyal",
    "mindful",
    "motivated",
    "optimistic",
    "original",
    "passionate",
    "patient",
    "perceptive",
    "persistent",
    "playful",
    "positive",
    "practical",
    "proactive",
    "reflective",
    "reliable",
    "resilient",
    "resourceful",
    "respectful",
    "selfless",
    "sincere",
    "spontaneous",
    "strategic",
    "supportive",
    "thoughtful",
    "trustworthy",
    "understanding",
    "upbeat",
    "versatile",
    "vibrant",
    "warm",
    "wise",
    "witty",
    "zany",
    "zestful"
] as const;
  
type AtlienAdjective = typeof atlienAdjectiveList;

const atlienNameList = [
    "James",
    "John",
    "Robert",
    "Michael",
    "William",
    "David",
    "Joseph",
    "Charles",
    "Daniel",
    "Matthew",
    "Christopher",
    "Joshua",
    "Andrew",
    "Ryan",
    "Brandon",
    "Justin",
    "Kevin",
    "Brian",
    "Mark",
    "Anthony",
    "Donald",
    "Steven",
    "Paul",
    "Kenneth",
    "Thomas",
    "Eric",
    "Jeremy",
    "Gregory",
    "Benjamin",
    "Patrick",
    "Alexander",
    "Jackson",
    "Aiden",
    "Ethan",
    "Noah",
    "Liam",
    "Mason",
    "Caleb",
    "Logan",
    "Isaiah",
    "Aaron",
    "Dylan",
    "Jacob",
    "Jayden",
    "Lucas",
    "Sebastian",
    "Nathan",
    "Zachary",
    "Jordan",
    "Carter",
    "Hunter",
    "Jaxon",
    "Jeremiah",
    "Levi",
    "Christian",
    "Jace",
    "Austin",
    "Peyton",
    "Eli",
    "Hayden",
    "Gabriel",
    "Isaac",
    "Miles",
    "Jaylen",
    "Malik",
    "Devin",
    "Andre",
    "Trey",
    "Darius",
    "Micah",
    "Jamal",
    "Tyrone",
    "Darnell",
    "Kendrick",
    "Xavier",
    "Damien",
    "Bryce",
    "Cole",
    "Wyatt",
    "Cooper",
    "Gavin",
    "Asher",
    "Easton",
    "Blake",
    "Luke",
    "Grayson",
    "Jaden",
    "Emmett",
    "Kingston",
    "Duke",
    "Zion",
    "Amari",
    "Karter",
    "Cameron",
    "Nolan",
    "Colton",
    "Bennett",
    "Maddox",
    "Avery",
    "Roman",
    "Riley",
    "Oliver",
    "Maxwell",
    "Brayden",
    "Braxton",
    "Jared",
    "Dominic",
    "Elijah",
    "Adrian",
    "Jonathan",
    "Zachariah",
    "Miguel",
    "Carlos",
    "Luis",
    "Eduardo",
    "Julian",
    "Diego",
    "Jorge",
    "Alejandro",
    "Manuel",
    "Francisco",
    "Ricardo",
    "Jesus",
    "Raul",
    "Javier",
    "Juan",
    "Santiago",
    "Mateo",
    "Esteban",
    "Cesar",
    "Alonzo",
    "Pedro",
    "Luis",
    "Andre",
    "Mohammed",
    "Abdul",
    "Sanjay",
    "Ravi",
    "Arjun",
    "Vikram",
    "Rohan",
    "Raj",
    "Kiran",
    "Krishna",
    "Anand",
    "Neel",
    "Priya",
    "Sakshi",
    "Aisha",
    "Anjali",
    "Rashmi",
    "Aarav",
    "Lakshmi",
    "Nisha",
    "Farah",
    "Ahmed",
    "Omar",
    "Hassan",
    "Nasir",
    "Abdullah",
    "Samir",
    "Kareem",
    "Amina",
    "Imani",
    "Tariq",
    "Fatima",
    "Malik",
    "Ali",
    "Sophia",
    "Isabella",
    "Maria",
    "Emilia",
    "Angelica",
    "Valeria",
    "Daniela",
    "Lucia",
    "Liliana",
    "Yasmine",
    "Anaya",
    "Sofia",
    "Maya",
    "Aria",
    "Layla",
    "Amelia",
    "Aaliyah",
    "Trinity",
    "Brianna",
    "Jada",
    "Destiny",
    "Kennedy",
    "Savannah",
    "London",
    "Skylar",
    "Madison",
    "Aubrey",
    "Harmony",
    "Serenity",
    "Dakota",
    "Brielle",
    "Laila",
    "Nevaeh",
    "Naomi",
    "Briana",
    "Leah",
    "Camila",
    "Luna",
    "Mila",
    "Violet",
    "Evelyn",
    "Zoey",
    "Scarlett",
    "Ariana",
    "Jayla",
    "Aliyah",
    "Journey",
    "Gianna",
    "Nia",
    "Isla",
    "Penelope",
    "Lydia",
    "Leilani",
    "Rosalina",
    "Kayla",
    "Elena",
    "Victoria",
    "Zoe",
    "Claire",
    "Madeline",
    "Aubree",
    "Sienna",
    "Vivian",
    "Tessa",
    "Hailey",
    "Ivy",
    "Maddison",
    "Savanna",
    "Bailey",
    "Hazel",
    "Sierra",
    "Jordan",
    "Paige",
    "Reagan",
    "Mackenzie",
    "Elise",
    "Sydney",
    "Jasmine",
    "Ariana",
    "Sabrina",
    "Nina",
    "Avery",
    "Harper",
    "Ashley",
    "Dylan",
    "Taylor",
    "Brooke",
    "Reese",
    "Courtney",
    "Mia",
    "Olivia",
    "Emma",
    "Abigail",
    "Chloe",
    "Sophia",
    "Riley",
    "Kendall",
    "Addison",
    "Emery",
    "Sadie",
    "Parker",
    "Rylan",
    "Faith",
    "Eliana",
    "Zoey",
    "Sasha",
    "Delilah",
    "Aurora",
    "Gabriella",
    "Makayla",
    "Leila",
    "Chanel",
    "Alana",
    "Selena",
    "Tiana",
    "Kiana",
    "Amara",
    "Jocelyn",
    "Monica",
    "Alondra",
    "Melanie",
    "Kimberly",
    "Daniela",
    "Vanessa",
    "Maya",
    "Sarai",
    "Amina",
    "Emira",
    "Ivanna",
    "Francesca",
    "Isha",
    "Jisoo",
    "Hyun",
    "Seung",
    "Soojin",
    "Minho",
    "Jihoon",
    "Kwan",
    "Sung",
    "Nguyen",
    "Tran",
    "Thao",
    "Anh",
    "Thanh",
    "Hanh",
    "Bao",
    "Hoang",
    "Linh",
    "Minh",
    "Tam",
    "Hieu",
    "Quyen",
    "Khoa",
    "Mai",
    "Huong",
    "Lan",
    "An",
    "Gia",
    "Truong",
    "Quynh",
    "Vy",
    "Thi",
    "Dao",
    "Yen",
    "Kim",
    "Samson",
    "Reuben",
    "Eliezer",
    "Adele",
    "Odelia",
    "Fatou",
    "Ibrahim",
    "Sadiya",
    "Jalil",
    "Kwame",
    "Zuri",
    "Nkosi",
    "Ade",
    "Ngozi",
    "Zane",
    "Luca",
    "Enzo",
    "Giuseppe",
    "Valentino",
    "Marcello",
    "Anastasia",
    "Ludmila",
    "Pavel",
    "Alexei",
    "Ingrid",
    "Bjorn",
    "Astrid",
    "Sven",
    "Lars",
    "Greta",
    "Hana",
    "Yasmin",
    "Farid",
    "Suleiman",
    "Talia",
    "Meira"
] as const;
  
type AtlienName = typeof atlienNameList;

const atlienNeighborhoodList = [
    "Downtown",
    "Midtown",
    "Buckhead",
    "Old Fourth Ward",
    "Historic South Atlanta",
    "Sandy Springs",
    "Mechanicsville",
    "Grant Park",
    "Inman Park",
    "Cabbagetown",
    "East Atlanta Village",
    "Kirkwood",
    "Ormewood Park",
    "Virginia-Highland",
    "West End",
    "Westview",
    "Peoplestown",
    "Reynoldstown",
    "Poncey-Highland",
    "Summerhill",
    "Adair Park",
    "Pittsburgh",
    "Atlantic Station",
    "Bankhead",
    "Lindbergh",
    "Chastain Park",
    "Glenwood Park",
    "Edgewood",
    "Candler Park",
    "Ansley Park",
    "Brookhaven",
    "Druid Hills",
    "Decatur",
    "East Lake",
    "Collier Hills",
    "Castleberry Hill",
    "Vine City",
    "Oakland City",
    "Bolton",
    "Blandtown",
    "Morningside-Lenox Park",
    "North Buckhead",
    "Adamsville",
    "Center Hill",
    "Ben Hill",
    "Capitol View",
    "Capitol View Manor",
    "Lakewood Heights",
    "East Point",
    "College Park",
    "Cascade Heights",
    "Greenbriar",
    "Sylvan Hills",
    "Fairburn",
    "Lake Claire",
    "Little Five Points",
    "Tuxedo Park",
    "Buckhead Forest",
    "West Paces Ferry",
    "East Paces Ferry",
    "North Druid Hills",
    "Tucker",
    "Chamblee",
    "Dunwoody",
    "Smyrna",
    "Vinings",
    "Roswell",
    "Alpharetta",
    "Johns Creek",
    "Duluth",
    "Norcross",
    "Lilburn",
    "Stone Mountain",
    "Lithonia",
    "Avondale Estates",
    "Clarkston",
    "Forest Park",
    "Mableton",
    "Austell",
    "Powder Springs",
    "Marietta",
    "Kennesaw",
    "Acworth",
    "Hapeville",
    "Union City",
    "Palmetto",
    "Fairburn",
    "Fayetteville",
    "Jonesboro",
    "Riverdale",
    "Stockbridge",
    "McDonough",
    "Peachtree City",
    "Senoia",
    "Newnan",
    "Conyers",
    "Covington",
    "Snellville",
    "Loganville",
    "Sugar Hill"
] as const;

type AtlienNeighborhood = typeof atlienNeighborhoodList;  

const atlienSpeciesList = [
    "Squyeral",
    "Hoovenator",
    "Ter'tool",
    "Spotty Snaek",
    "Karditron",
    "Thrashenor",
    "Blood Foox",
    "Horned Aul",
    "Bunny-neichus",
    "Blossomus Prime"
] as const;

type AtlienSpecies = typeof atlienSpeciesList;

const atlienFavoriteColorList = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350] as const;

type AtlienFavoriteColor = typeof atlienFavoriteColorList;

const atlienWingsPreferenceList = [
    "Buffalo Mild",
    "Buffalo Hot",
    "Korean BBQ",
    "Taco Mac Three Mile Island",
    "Lemon Pepper",
    "Lemon Pepper Wet",
    "Lemon Pepper Wet",
    "Lemon Pepper Wet",
    "Lemon Pepper Wet",
    "Lemon Pepper Wet",
    "Lemon Pepper Wet",
    "Lemon Pepper Wet",
    "Lemon Pepper Wet"
] as const;

type AtlienWingsPreference = typeof atlienWingsPreferenceList;

const atlienFavoriteMusicVenue = [
    "The Masquerade",
    "The (Old) Masquerade",
    "The Tabernacle",
    "Variety Playhouse",
    "Center Stage",
    "Lakewood Amphitheatre",
    "Redlight Cafe",
    "MJQ",
    "Drunken Unicorn",
    "Star Bar",
    "Smith's Olde Bar",
    "Eddie's Attic",
    "Tongue & Groove",
    "529",
    "Apache",
    "Union EAV",
    "Dark Horse"
] as const;

type AtlienFavoriteMusicVenue = typeof atlienFavoriteMusicVenue;

type Atlien = {
    latitude: number;
    longitude: number;
    adjective: AtlienAdjective;
    name: AtlienName;
    neighborhood: AtlienNeighborhood;
    species: AtlienSpecies;
    favoriteColor: AtlienFavoriteColor;
    wingsPreference: AtlienWingsPreference;
    singingAbility: number;
    driversLicensePoints: number; // 0 - 15
    favoriteMusicVenue: AtlienFavoriteMusicVenue;
    martaCardValue: number; // Decimal value to USD
}

export function findAtlien(latitude: number, longitude: number) {
    const latLongString = `${latitude},${longitude}`;
    const hash = createHash('sha256').update(latLongString).digest('hex');
    const uniqueNumber = BigInt('0x' + hash);

    const rawAdjective = selectFromList(uniqueNumber, atlienAdjectiveList);
    const adjective = capitalizeFirstLetter(rawAdjective);
    const name = selectFromList(uniqueNumber, atlienNameList);
    const neighborhood = selectFromList(uniqueNumber, atlienNeighborhoodList);
    const species = selectFromList(uniqueNumber, atlienSpeciesList);
    const favoriteColor = selectFromList(uniqueNumber, atlienFavoriteColorList);
    const wingsPreference = selectFromList(uniqueNumber, atlienWingsPreferenceList);
    const favoriteMusicVenue = selectFromList(uniqueNumber, atlienFavoriteMusicVenue);

    const singingAbility = selectNumberInRange(uniqueNumber, 1, 10);
    const martaCardValue = selectNumberInRange(uniqueNumber, 0, 100);
    const driversLicensePoints = selectNumberInRange(uniqueNumber, 0, 15);

    return {
        latitude,
        longitude,
        adjective,
        name,
        neighborhood,
        species,
        favoriteColor,
        wingsPreference,
        favoriteMusicVenue,
        singingAbility,
        martaCardValue,
        driversLicensePoints,
    };
}

function selectFromList<T>(uniqueNumber: bigint, list: readonly T[]): T {
    const hash = createHash('sha256').update(`${uniqueNumber}`).digest('hex');
    const offset = BigInt('0x' + hash);
    const index = Number((uniqueNumber+offset) % BigInt(list.length));
    return list[index];
}

function selectNumberInRange(uniqueNumber: bigint, min: number, max: number): number {
    const range = BigInt(max - min + 1);
    const hash = createHash('sha256').update(`${uniqueNumber}`).digest('hex');
    const offset = BigInt('0x' + hash);
    const value = Number((uniqueNumber+offset) % range);
    return min + value;
}

function capitalizeFirstLetter(text: string): string {
    return text.charAt(0).toUpperCase() + text.slice(1);
}
